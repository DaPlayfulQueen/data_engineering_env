version: '3.8'
x-airflow-common:
  &airflow-common
  image: custom_airflow
  build:
    context: airflow
    dockerfile: ./Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__CORE__PARALLELISM: 32
    AIRFLOW__CELERY__WORKER_CONCURRENCY: 32
    AIRFLOW__CORE__KILLED_TASK_CLEANUP_TIME: 172800
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    airflow-postgres:
      condition: service_healthy
  security_opt:
    - no-new-privileges:true
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - logs:/opt/airflow/logs

services:
  airflow-postgres:
    container_name: airflow_postgres
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      etl_airflow:
        aliases:
          - airflow-postgres

  redis:
    container_name: airflow_redis
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - etl_airflow

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: always
    networks:
      - etl_airflow

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl_airflow

  airflow-worker:
    <<: *airflow-common
    container_name: airflow_worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl_airflow

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow_triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    profiles:
      - triggerer
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl_airflow

  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init
        airflow users create --username airflow --password airflow --firstname admin --lastname admin --role Admin --email test
        airflow connections import /var/tmp/connections.json
    environment:
      <<: *airflow-common-env
    volumes:
      - ./airflow/config:/var/tmp
    networks:
      - etl_airflow

  # only works with run
  airflow-cli:
    <<: *airflow-common
    container_name: airflow_cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
    networks:
      - etl_airflow


  flower:
    <<: *airflow-common
    container_name: airflow_flower
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - etl_airflow

  postgres:
    container_name: postgres
    build:
      context: ./database
      dockerfile: ./Dockerfile
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: server
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    restart: always
    networks:
      etl_airflow:
        aliases:
          - postgres


  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:6.18
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: daplayful@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./study_artifacts/pgadmin:/var/lib/pgadmin/storage
    networks:
      - etl_airflow

volumes:
  airflow-postgres-db-volume:
  postgres-db-volume:
  logs:
  pgadmin:

networks:
  etl_airflow:
